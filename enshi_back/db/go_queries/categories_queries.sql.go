// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: categories_queries.sql

package db_repo

import (
	"context"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO public.categories
(category_id, category_name)
VALUES($1, $2)
RETURNING category_id, category_name
`

type CreateCategoryParams struct {
	CategoryID   int32  `json:"category_id"`
	CategoryName string `json:"category_name"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRow(ctx, createCategory, arg.CategoryID, arg.CategoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}

const deleteCategoryById = `-- name: DeleteCategoryById :exec
DELETE FROM public.categories
WHERE category_id=$1
`

func (q *Queries) DeleteCategoryById(ctx context.Context, categoryID int32) error {
	_, err := q.db.Exec(ctx, deleteCategoryById, categoryID)
	return err
}

const getAllCategories = `-- name: GetAllCategories :many
SELECT category_id, category_name FROM public.categories
`

func (q *Queries) GetAllCategories(ctx context.Context) ([]Category, error) {
	rows, err := q.db.Query(ctx, getAllCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.CategoryID, &i.CategoryName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryByName = `-- name: GetCategoryByName :one
SELECT category_id, category_name FROM public.categories WHERE category_name = $1
`

func (q *Queries) GetCategoryByName(ctx context.Context, categoryName string) (Category, error) {
	row := q.db.QueryRow(ctx, getCategoryByName, categoryName)
	var i Category
	err := row.Scan(&i.CategoryID, &i.CategoryName)
	return i, err
}
