// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post_tags_queries.sql

package db_repo

import (
	"context"
)

const createPostTagRelation = `-- name: CreatePostTagRelation :one
INSERT INTO public.post_tags
(post_id, tag_id)
VALUES($1, $2)
RETURNING post_id, tag_id
`

type CreatePostTagRelationParams struct {
	PostID int64 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) CreatePostTagRelation(ctx context.Context, arg CreatePostTagRelationParams) (PostTag, error) {
	row := q.db.QueryRow(ctx, createPostTagRelation, arg.PostID, arg.TagID)
	var i PostTag
	err := row.Scan(&i.PostID, &i.TagID)
	return i, err
}

const deletePostTagRelation = `-- name: DeletePostTagRelation :exec
DELETE FROM public.post_tags
WHERE post_id = $1 AND tag_id = $2
`

type DeletePostTagRelationParams struct {
	PostID int64 `json:"post_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) DeletePostTagRelation(ctx context.Context, arg DeletePostTagRelationParams) error {
	_, err := q.db.Exec(ctx, deletePostTagRelation, arg.PostID, arg.TagID)
	return err
}

const getAllTagsForPost = `-- name: GetAllTagsForPost :many
SELECT tags.tag_id, tags.tag_name
from public.tags tags
JOIN public.post_tags post_tags on post_tags.tag_id = tags.tag_id
JOIN public.posts posts on posts.post_id = post_tags.post_id
`

type GetAllTagsForPostRow struct {
	Tag Tag `json:"tag"`
}

func (q *Queries) GetAllTagsForPost(ctx context.Context) ([]GetAllTagsForPostRow, error) {
	rows, err := q.db.Query(ctx, getAllTagsForPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllTagsForPostRow
	for rows.Next() {
		var i GetAllTagsForPostRow
		if err := rows.Scan(&i.Tag.TagID, &i.Tag.TagName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
